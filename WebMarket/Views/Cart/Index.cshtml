@model IEnumerable<WebMarket.Models.ViewModels.Cart.CartVM>

@{
    ViewBag.Title = "Cart Details";
}

<h2>Cart Details</h2>

@if (TempData["SM"] != null)
{
    <div class="alert alert-success">
        @TempData["SM"]
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">
        @TempData["Error"]
    </div>
}

@if (ViewBag.Message != null)
{
    <h3>@ViewBag.Message</h3>
}
else
{
    <table class="table">
        <tr>
            <th>
                Name
            </th>
            <th>
                Quantity
            </th>
            <th>
                Price
            </th>
            <th>
                Image
            </th>
            <th>

            </th>
            <th>
                Total
            </th>
            <th>

            </th>


        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ProductName)
                </td>
                <td class="qty@(item.ProductId)">
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td>
                    $@Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    <img src="/Images/Uploads/Products/@item.ProductId/Thumbs/@item.Image" alt="Alternate Text" />
                </td>


                <td>
                    <a href="#" class="incrproduct" data-id="@item.ProductId">+</a>
                    <a href="#" class="decrproduct" data-id="@item.ProductId">-</a>
                    <a href="#" class="removeproduct" data-id="@item.ProductId">Remove</a>
                </td>
                <td class="total@(item.ProductId)">
                    $@Html.DisplayFor(modelItem => item.Total)
                </td>
            </tr>
        }
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td class="grandtotal"><b>Grand total $</b><span>@ViewBag.GrandTotal</span></td>
        </tr>

    </table>
    <br />

    @*<form class="paypalform" target="paypal" action="https://www.sandbox.paypal.com/cgi-bin/webscr" method="post">
            <input type="hidden" name="cmd" value="_s-xclick">
            <input type="hidden" name="hosted_button_id" value="19218">
            <table>
                <tr><td><input type="hidden" name="on0" value="Color">Color</td></tr>
                <tr>
                    <td>
                        <select name="os0">
                            <option value="Red">Red $10.00
                            <option value="Blue">Blue $8.00
                            <option value="Green">Green $12.00
                        </select>
                    </td>
                </tr>
                <tr><td><input type="hidden" name="on1" value="Size">Size</td></tr>
                <tr>
                    <td>
                        <select name="os1">
                            <option value="Small">Small
                            <option value="Large">Large
                        </select>
                    </td>
                </tr>
            </table>
            <input type="hidden" name="currency_code" value="USD">
            <input type="image" src="https://www.paypalobjects.com/webstatic/en_US/i/btn/png/btn_addtocart_120x26.png" alt="Add to Cart" name="submit">
            <img alt="" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
        </form>*@
    @*<div id="paypal-button-container"></div>*@
    <br />
    @*<a href="#" class="checkout placeorder btn btn-primary pull-right">Checkout</a>*@
    @Html.ActionLink("Checkout", "checkout")
}


@section Scripts  {

    @*<script src="https://www.paypal.com/sdk/js?client-id=sb&currency=USD"></script>

        <script>
            // Render the PayPal button into #paypal-button-container
            paypal.Buttons({

                // Set up the transaction
                createOrder: function (data, actions) {
                    return actions.order.create({
                        purchase_units: [{
                            amount: {
                                value: '0.01'
                            }
                        }]
                    });
                },

                // Finalize the transaction
                onApprove: function (data, actions) {
                    return actions.order.capture().then(function (details) {
                        // Show a success message to the buyer
                        alert('Transaction completed by ' + details.payer.name.given_name + '!');
                    });
                }


            }).render('#paypal-button-container');</script>*@



    <script>




        /*
         *increment product

         */
        $(function () {
            $("a.incrproduct").click(function (e) {
                e.preventDefault();

                var productId = $(this).data("id");
                var url = "/cart/IncrementProduct";

                $.getJSON(url, { productId: productId }, function (data) {
                    $("td.qty" + productId).html(data.qty);

                    var price = data.qty * data.price;
                    var priceHtml = "$" + price.toFixed(2);

                    $("td.total" + productId).html(priceHtml);

                    var gt = parseFloat($("td.grandtotal span").text());
                    var grandtotal = (gt + data.price).toFixed(2);

                    $("td.grandtotal span").text(grandtotal);
                });
            });
            /////////////////////////////////////////
            /*
         *decrement product

         */




            $("a.decrproduct").click(function (e) {
                e.preventDefault();

                var $this = $(this);
                var productId = $(this).data("id");
                var url = "/cart/DecrementProduct";

                $.getJSON(url, { productId: productId }, function (data) {
                    if (data.qty == 0) {
                        $this.parent().parent().fadeOut("fast", function () {
                            location.reload();
                        });
                    }
                    else {
                        $("td.qty" + productId).html(data.qty);

                        var price = data.qty * data.price;
                        var priceHtml = "$" + price.toFixed(2);

                        $("td.total" + productId).html(priceHtml);

                        var gt = parseFloat($("td.grandtotal span").text());
                        var grandtotal = (gt - data.price).toFixed(2);

                        $("td.grandtotal span").text(grandtotal);

                    }

                });
            });
            /////////////////////////////////////////
            /*
            *remove product

            */



            $("a.removeproduct").click(function (e) {
                e.preventDefault();

                var $this = $(this);
                var productId = $(this).data("id");
                var url = "/cart/RemoveProduct";

                $.get(url, { productId: productId }, function (data) {
                    location.reload();
                });
                /////////////////////////////////////////

            });
            /////////////////////////////////////////
            $("a.checkout").click(function (e) {
                e.preventDefault();

                //var $this = $(this);
                //var productId = $(this).data("id");
                var url = "/cart/checkout";

                $.get(url, function (data) {
                    // location.refre;
                });
                /////////////////////////////////////////

            });
        });
                                             /*
*confirm the page deletion

*/

                                                /////////////////////////////////////////
    </script>

}